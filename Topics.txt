-------------------------YuvaSoft Training Period----------------------

Day-1

-Learn HTML and CSS from W3SCHOOLS

-----------------------------------------
**HTML Attributes-
	 provide additional information about elements.
	ex- <a href="www"
	href is attribute and always specified in the start tag.

	1. title attribute-The title attribute defines some extra information about an element.

	The value of the title attribute will be displayed as a tooltip when you mouse over the element:
Chapter Summary
 All HTML elements can have attributes 
 The href attribute of <a> specifies the URL of the page the link goes to
 The src attribute of <img> specifies the path to the image to be displayed
 The width and height attributes of <img> provide size information for images
 The alt attribute of <img> provides an alternate text for an image
 The style attribute is used to add styles to an element, such as color, font, size, and more
 The lang attribute of the <html> tag declares the language of the Web page
 The title attribute defines some extra information about an element

**Headings**

-Search engines use the headings to index the structure and content of your web pages.
 Users often skim a page by its headings. It is important to use headings to show the document structure.
 <h1> headings should be used for main headings, followed by <h2> headings, then the less important <h3>, and so on
	
-We can change font size of the heading through style attribute.

**Paragraph**

-The HTML <p> element defines a paragraph.
-A paragraph always starts on a new line, and browsers automatically add some white space (a margin) before and after a paragraph.

**hr tag**

	-The <hr> tag defines a thematic break in an HTML page, and is most often displayed as a horizontal rule.
         --------------------------------------------------------------------------------------
	-The <hr> element is used to separate content (or define a change) in an HTML page:

**br tag**

	-br tag define a line break
	-Use <br> if you want a line break (a new line) without starting a new paragraph

**pre tag**

	-The HTML <pre> element defines preformatted text.
	-The text inside a <pre> element is displayed in a fixed-width font (usually Courier), 
	 and it preserves both spaces and line breaks

Q------------Difference between align-items and justify-content
	-text-align: center:
	 This property is used to center the content (including text) inside a block-level element (like a div, p, or h1) horizontally. 
	 It's a direct way to center text within a container. 

	-justify-content: center
	 This property is part of the Flexbox layout module. It controls the alignment of flex items along the main axis of a flex container. 
	 When justify-content: center is applied, flex items will be positioned in the center of their container's main axis. 

**HTML Formatting Elements**
	
	-Formatting elements were designed to display special types of text
	<b> - Bold text
	<strong> - Important text
	<i> - Italic text
	<em> - Emphasized text
	<mark> - Marked text
	<small> - Smaller text
	<del> - Deleted text
	<ins> - Inserted text
	<sub> - Subscript text
	<sup> - Superscript text

**HTML Quotations and Citations**

	-Tag		Description

	<abbr>	        Defines an abbreviation or acronym
	<address>	Defines contact information for the author/owner of a document
	<bdo>	        Defines the text direction
	<blockquote>	Defines a section that is quoted from another source
	<cite>	        Defines the title of a work
	<q>	        Defines a short inline quotation
-------------------------------------------------------------------------------------------------------------------------------------

==============CSS=============

Cascading Style Sheets (CSS) is used to format the layout of a webpage.

With CSS, you can control the color, font, the size of text, the spacing between elements, how elements are positioned and laid out, 
what background images or background colors are to be used, different displays for different devices and screen sizes, and much more!

Using CSS
CSS can be added to HTML documents in 3 ways:

Inline - by using the style attribute inside HTML elements
Internal - by using a <style> element in the <head> section
External - by using a <link> element to link to an external CSS file

-Use the HTML style attribute for inline styling
-Use the HTML <style> element to define internal CSS
-Use the HTML <link> element to refer to an external CSS file
-Use the HTML <head> element to store <style> and <link> elements
-Use the CSS color property for text colors
-Use the CSS font-family property for text fonts
-Use the CSS font-size property for text sizes
-Use the CSS border property for borders
-Use the CSS padding property for space inside the border
-Use the CSS margin property for space outside the border

**Link**

	-Use the <a> element to define a link
	-Use the href attribute to define the link address
	-Use the target attribute to define where to open the linked document
	-Use the <img> element (inside <a>) to use an image as a link
	-Use the mailto: scheme inside the href attribute to create a link that opens the user's email program

**Table**

	<table style="width:100%">
        <tr>
            
                <th>Company</th>
                <th>Contact</th>
                <th>Country</th>
            
        </tr>
        <tr style="text-align: center;">
            
                <td >Alfreds</td>
                <td>Maria</td>
                <td>Germany</td>
            
        </tr>
        <tr style="text-align: center;">
            <td>Centro</td>
            <td>Fransico</td>
            <td>Mexico</td>
        </tr>
    </table>

	-============Vertical tables=================

	<table>
  <tr>
    <th>Firstname</th>
    <td>Jill</td>
    <td>Eve</td>
  </tr>
  <tr>
    <th>Lastname</th>
    <td>Smith</td>
    <td>Jackson</td>
  </tr>
  <tr>
    <th>Age</th>
    <td>94</td>
    <td>50</td>
  </tr>
</table>

	===========Header for multiple columns==========

	<tr>
    <th colspan="2">Name</th>
    <th>Age</th>
  </tr>
  <tr>
    <td>Jill</td>
    <td>Smith</td>
    <td>50</td>
  </tr>
	
	===========Table Captions=============
	You can add a caption that serves as a heading for the entire table.

	<table style="width:100%">
  		<caption>Monthly savings</caption>
  	<tr>
   		 <th>Month</th>
    		<th>Savings</th>
  	</tr>

---------------------------------------------------------------------------------------------------------------------------------------

============================= Day - 2 ====================================
**List**

	-Unordered List
Use the HTML <ul> element to define an unordered list
Use the CSS list-style-type property to define the list item marker
Use the HTML <li> element to define a list item
Lists can be nested
List items can contain other HTML elements
Use the CSS property float:left to display a list horizontally
	
	-Ordered List
-We can define type like 1, A,a, I,i for numbering.
-We can also customized start number like start="50"

**HTML Block & inline**

	-Block elements are those elements which start from new line and takes full width
	ex. div, paragraph, header , footer, table etc.

	-inline elements doesn't start from new line and it takes as much width as neccessary.
	ex. span, anchor , button , img, strong etc.

**HTML Form**

	-fieldset element is used to group related data in a form.
	-target element defines a caption for the <fieldset> element.
	
<form>		Defines an HTML form for user input
<input>		Defines an input control
<textarea>	Defines a multiline input control (text area)
<label>		Defines a label for an <input> element
<fieldset>	Groups related elements in a form
<legend>	Defines a caption for a <fieldset> element
<select>	Defines a drop-down list
<optgroup>	Defines a group of related options in a drop-down list
<option>	Defines an option in a drop-down list
<button>	Defines a clickable button
<datalist>	Specifies a list of pre-defined options for input controls
<output>	Defines the result of a calculation

**CSS Selectors**
	
CSS selectors are used to "find" (or select) the HTML elements you want to style.

We can divide CSS selectors into five categories:

==Simple selectors (select elements based on name, id, class)

	Selector	Example		Example description
	#id		#firstname	Selects the element with id="firstname"
	.class		.intro		Selects all elements with class="intro"
	*		*		Selects all elements
	element		p		Selects all <p> elements
	element,element,..div, p	Selects all <div> elements and all <p> elements	


Combinator selectors (select elements based on a specific relationship between them)
Pseudo-class selectors (select elements based on a certain state)
Pseudo-elements selectors (select and style a part of an element)
Attribute selectors (select elements based on an attribute or attribute value)

**Box-model**
	-margin, border, padding and content.

**Position**
	-Fixed - it will fixed even when you scrolling.
	-relative- moves elements from its normal position.
	-absoulute- moves elements from its parent element or body.
	-Sticky- An element with position: sticky; is positioned based on the user's scroll position.
	-Static- by default position
	
**Z-index**
	-When elements are positioned, they can overlap other elements.

	-The z-index property specifies the stack order of an element (which element should be placed in front of, or behind, the others).

	-An element can have a positive or negative stack order:
	 The z-index in CSS is a property that controls the stacking order of elements on a webpage along the z-axis (i.e., front-to-back).
	 Elements with a higher z-index appear in front of elements with a lower z-index.

**Overflow**
	-In CSS, the overflow property controls what happens when content overflows the boundaries of its container 
	(i.e., it doesn't fit inside the defined width or height).
	
	===Types===
	
	visible (default): Content overflows and is visible outside the element's box.

	hidden: Overflowing content is clipped (cut off) and not visible.

	scroll: Always shows scrollbars, even if not needed.

	auto: Scrollbars are shown only when necessary (if content overflows).

	Overflow-x : Specifies what to do with the left/right edges of the content if it overflows the element's content area.
	
	Overflow-y: Specifies what to do with the top/bottom edges of the content if it overflows the element's content area.

**Pseudo class**

	-pseudo-classes are keywords added to selectors that define a special state of an element without needing to add 
	a class or ID in HTML.

	selector:pseudo-class {
  	   property: value;
	}
	
	== User action pseudo class - visited, unvisited, mouse hover link, selected link(active),
	== Structural pseudo classes - first child, last child ,nth child, nth-of-type
	== Form state pseudo classes

**Float** 

	-The float property in CSS is used to position elements to the left or right within their container, 
	allowing text or other inline elements to wrap around them — like how images often appear next to paragraphs in articles

**Navigation Bar**

	-Horizontal + Vertical
===================================================Day - 3==========================================================
**CSS Forms**

	-Box-sizing: Border-box   
		-by border box padding and margin included in total width 
	-style form using css
	-apply search image on input field.
	-Animate search input
	-Textarea design with resize : none
	-Making responsive by applying media query

**Counters**    

	-A CSS counter is like a number that automatically counts things on your webpage.

	You can use it to automatically number:

		-Headings

		-Sections

		-List items
	
		-Steps in a tutorial

		-You don’t need to write the numbers manually — CSS will do it for you.
  
**Pagination**

	-Pagination means breaking content into multiple pages and giving users buttons to navigate between them

		-Pagination is not a CSS feature.

		-But in CSS, you style the pagination buttons (HTML links or list items).

		-It improves user experience by making content easy to browse in parts.   
**FlexBox**

	-Flexbox is short for the Flexible Box Layout module.
	-Flexbox is a layout method for arranging items in rows or columns.
	-Flexbox makes it easier to design a flexible responsive layout structure, without using float or positioning. 

	
	.flex-container > div {                             > ye sign ka matlb hai ki jo bhi immediate div hai uspe apply hoga
  				background-color: #f1f1f1;
  				margin: 10px;
  				padding: 20px;
  				font-size: 30px;
				}  
**Grid**

	-CSS Grid is a layout system in CSS that helps you build two-dimensional layouts — like tables, image galleries, dashboards, etc.

	-Unlike Flexbox (1D layout: row or column), Grid lets you control both rows and columns together.

		======grid-template-columns: repeat(3, 1fr);
			-This means:

			Create 3 columns 

			Each column gets 1 equal part of the available space
			→ So it's like: 1fr 1fr 1fr (each column = 33.3% of space)
		===== grid-template-areas: 
			grid-template-areas:
                				"header header" /*for both column*/
              					"menu content"  /*menu is on the left, content on the right*/
               					"footer footer"; /*for both column*/
		==Grid column gap property
**Transition**

	-CSS transitions allows you to change property values smoothly, over a given duration.

	==transition-timing-function-
	
	The transition-timing-function property can have the following values:

		ease - specifies a transition effect with a slow start, then fast, then end slowly (this is default)
		linear - specifies a transition effect with the same speed from start to end
		ease-in - specifies a transition effect with a slow start
		ease-out - specifies a transition effect with a slow end
		ease-in-out - specifies a transition effect with a slow start and end

**Animation**

	-An animation lets an element gradually change from one style to another.

	-You can change as many CSS properties you want, as many times as you want.

	-To use CSS animation, you must first specify some keyframes for the animation.

	-Keyframes hold what styles the element will have at certain times.

//CSS Animation Properties

The following table lists the @keyframes rule and all the CSS animation properties:

	Property		Description
	@keyframes		Specifies the animation code
	animation		A shorthand property for setting all the animation properties
	animation-delay		Specifies a delay for the start of an animation
	animation-direction	Specifies whether an animation should be played forwards, backwards or in alternate cycles
	animation-duration	Specifies how long time an animation should take to complete one cycle
	animation-fill-mode	Specifies a style for the element when the animation is not playing (before it starts, after it ends, or both)
	animation-iteration-count	Specifies the number of times an animation should be played	
	animation-name			Specifies the name of the @keyframes animation
	animation-play-state		Specifies whether the animation is running or paused
	animation-timing-function	Specifies the speed curve of the animation

=====================================================Day-4==================================================================================

**Practice Topics of HTML and CSS**
	
	1. Create Nav bar and add background image and Header.
	2. Create Table and style with CSS
	3. Create SignUp form with using all inputs
	4. Apply dropdown list and pseudo class in links
	5. Image gallery
**Image gallery**
	
	#Image sprites
====================================================Day-5=================================================================================

**CSS Border radius**

	-Apply multiple borders

**Bootstrap**
	
	-Bootstrap is a free front-end framework for faster and easier web development
	-Bootstrap includes HTML and CSS based design templates for typography, forms, buttons, tables, 
	 navigation, modals, image carousels and many other, as well as optional JavaScript plugins
	-Bootstrap also gives you the ability to easily create responsive designs
	
**Bootstrap container**
	-container and container-fluid they have fixed width with responsiveness.

**Bootstrap grid system**

	-Bootstrap's grid system is built with flexbox and allows up to 12 columns across the page.

	-If you do not want to use all 12 columns individually, you can group the columns together to create wider columns:

---------------------------------------------JavaScript--------------------------------------------------------------------------

		Javascript is a programming language primarily used to make web pages interactive.It's often used alongside html and css 
		to add dynamic features and functionality to websites like animations, interactive elements and more.

**DataTypes**
	
	1. JavaScript BigInt

	All JavaScript numbers are stored in a 64-bit floating-point format.
	JavaScript BigInt is a new datatype (ES2020) that can be used to store integer values that are too 
	big to be represented by a normal JavaScript Number.

	let big = BigInt("123456789012345678901234567890");
	console.log(big);

**Functions**

	-JS function is a block of code designed to perform a particular task.
	-function is executed when something invoked it.


==============================================================Day-6===============================================================
**Objects**
	
	-An object in JavaScript is a collection of key-value pairs.
	Each key (also called a property or name) is a string, and each value can be anything: a number, string, function, array, 
	or even another object.

	==Nested objects -
	==Object destructuring- unpack values from an object into variables easily.
	
	==Ways to display objects==
	-Object.values() creates an array from the property values:

**Object Constructor Functions**

	-Sometimes we need to create many objects of the same type.

	-To create an object type we use an object constructor function.

	-It is considered good practice to name constructor functions with an upper-case first letter.

**Events**

	-An event is something that happens in the browser — like a button click, a key press, mouse hover, or page load.

	-JavaScript can listen for these events and then run some code when they happen.
	
	1.Button click event
	2.Apply add event listener
	3.Input key press event

**String**

	-String is a sequence of characters and it is immutable.
	
**String Methods**
	
	==Extracting String Parts==
	There are 3 methods for extracting a part of a string:

		-slice(start, end)
		-substring(start, end)
		-substr(start, length)
	==Difference between slice and substring 
		-if we pass negative value in slice then it will count index from end
		-if we pass negative value in substring then it will count as 0 and start from zero index.

	==PadStart() method is a String method.To pad a number,convert a number to a string first.
	==PadEnd() method pads a string from the end. 
	==repeat() method returns a string with a number of copies of a string.
	==replace() method
			-The replace() method does not change the string it is called on.

			-The replace() method returns a new string.

			-The replace() method replaces only the first match and it is a case sensitive.

			-To replace case insensitive, use a regular expression with an /i flag (insensitive):
			
			-in place of replaceAll we can use regular expression with a '/g' flag for global match.

	==replaceAll() method
			-it is replace multiple values.

	==String split()--A string can be converted to an array with the split() method:

**String search methods**
	
	1.indexOf() - The indexOf() method returns the index (position) of the first occurrence of a string in a string, 
	  or it returns -1 if the string is not found

	2.lastIndexOf() - The lastIndexOf() method returns the index of the last occurrence of a specified text in a string:
		===Both the method take 2 parameters second is starting position/index of search.

	3.search() - The search() method searches a string for a string (or a regular expression) and returns the position of the match:

	*****Difference b/w indexOf and search*****
		-The search() method cannot take a second start position argument.
		-The indexOf() method cannot take powerful search values (regular expressions). 

	4.match()-The match() method returns an array containing the results of matching a string against a string 
		  (or a regular expression).
	5.matchAll()- The matchAll() method returns an iterator containing the results of matching a string against a string 
		  (or a regular expression)
	6.includes()-The includes() method returns true if a string contains a specified value.Otherwise it returns false
	7.startsWith()- The startsWith() method returns true if a string begins with a specified value.
	Otherwise it returns false.

**Numbers**
	
	==Hexadecimal==
		--JavaScript interprets numeric constants as hexadecimal if they are preceded by 0x.
	==toFixed()- toFixed() returns a string, with the number written with a specified number of decimals.
			**it return string so to convert it into number use parseInt(str)
	==valueOf()- The valueOf() method is used internally in JavaScript to convert Number objects to primitive values.

**Arrays**

	

	==The Difference Between Arrays and Objects

		-In JavaScript, arrays use numbered indexes.  
		-In JavaScript, objects use named indexes.
	You should use objects when you want the element names to be strings (text).
	You should use arrays when you want the element names to be numbers.

	==How to Recognize an Array

		-Array.isArray(fruits);

		-const fruits = ["Banana", "Orange", "Apple"];
		(fruits instanceof Array);

	==The join() method also joins all array elements into a string.

	==Shift() method-
			-The shift() method removes the first array element and "shifts" all other elements to a lower index.
			-The shift() method returns the value that was "shifted out":
	==Unshift() method-
			-The unshift() method adds a new element to an array (at the beginning), and "unshifts" older elements:
			-The unshift() method returns the new array length:

	==Concat() method-
			-The concat() method creates a new array by merging (concatenating) existing arrays:
			-The concat() method does not change the existing arrays. It always returns a new array.
			-The concat() method can take any number of array arguments.
	==copyWithIn()-
			-The copyWithin() method copies array elements to another position in an array:
	==flat()-
			-The flat() method creates a new array with sub-array elements concatenated to a specified depth
	==splice(strt indx, deletecount, newElement)
			-The splice() method can be used to add,remove and replace new items to an array
	==slice(strt idx,end idx)
			-last index is exclusive.

	==find()-
			-The find() method returns the value of the first array element that passes a test function.

	==findIndex()   
			-The findIndex() method returns the index of the first array element that passes a test function.

	==findLast()
			-findLast() method that will start from the end of an array and return the value of the first element 
			that satisfies a condition.

	==sort()	-The sort() method sorts an array alphabetically
			=====By combining sort() and reverse(), you can sort an array in descending order:

	===toSorted()	
			-toSorted() method as a safe way to sort an array without altering the original array.
			
			**The difference between toSorted() and sort() is that the first method creates a new array, 
			  keeping the original array unchanged, while the last method alters the original array.

	==forEach()
			-The forEach() method calls a function (a callback function) once for each array element.

	==map()       
			-The map() method creates a new array by performing a function on each array element.
			-The map() method does not execute the function for array elements without values.
			-The map() method does not change the original array.

	==filter()	
			-The filter() method creates a new array with array elements that pass a test.
	
	==reduce()
			-The reduce() method runs a function on each array element to produce (reduce it to) a single value.

**Destructuring**
	
	==Object destructuring---The destructuring assignment syntax unpack object properties into variables:

**Scope**

	-JavaScript variables have 3 types of scope:

		-Block scope
		-Function scope
		-Global scope
=================================================Day-7=========================================================================

**Array remaining methods**

	==every()
			-The every() method checks if all array values pass a test.
	==some()
			-The some() method checks if some array values pass a test.
	==from()
			-The Array.from() method returns an Array object from any object with a length property or any iterable object.

**DOM**

		-When a web page is loaded, the browser creates a Document Object Model of the page.

**DOM Methods**
		-HTML Methods are actions you can perform on HTML elements.(getElementById)
**Property**	-A property is a value that you can get or set (like changing the content of an HTML element).(innerHTML)

**Document**    -The document object represents your web page.
		-If you want to access any element in an HTML page, you always start with accessing the document object.
		
**Element**	-Often, with JavaScript, you want to manipulate HTML elements.

		To do so, you have to find the elements first. There are several ways to do this:

			Finding HTML elements by id
			Finding HTML elements by tag name ex. paragraph tag
			Finding HTML elements by class name
			Finding HTML elements by CSS selectors
			Finding HTML elements by HTML object collections
**document.write()
			-document.write() can be used to write directly to the HTML output stream
**JS form validation**

			-HTML form validation can be done by JavaScript.
			-If a form field (fname) is empty, this function alerts a message, and returns false, 
			 to prevent the form from being submitted

**Data Validation**    -Data validation is the process of ensuring that user input is clean, correct, and useful.

			Typical validation tasks are:

				-has the user filled in all required fields?
				-has the user entered a valid date?
				-has the user entered text in a numeric field?

			==Server side validation is performed by a web server, after input has been sent to the server.

			==Client side validation is performed by a web browser, before input is sent to a web server.

**HTML DOM - Changing CSS**

			-The HTML DOM allows JavaScript to change the style of HTML elements.

**DOM Events**		-HTML DOM allows JavaScript to react to HTML events

			-A JavaScript can be executed when an event occurs, like when a user clicks on an HTML element.
			-To execute code when a user clicks on an element, add JavaScript code to an HTML event attribute
			
			Examples of HTML events:

				When a user clicks the mouse
				When a web page has loaded
				When an image has been loaded
				When the mouse moves over an element
				When an input field is changed
				When an HTML form is submitted
				When a user strokes a key

		==Oninput event
**node** 

**Callbacks**	-A callback is a function passed as an argument to another function

		-This technique allows a function to call another function

		-A callback function can run after another function has finished

**Asynchronous**

		-Functions running in parallel with other functions are called asynchronous
		-A good example is JavaScript setTimeout()
**Promise**
		
**Async/Await**	 - async and await make promises easier to write
			-async makes a function return a Promise
			-await makes a function wait for a Promise	
**Math**
		-The JavaScript Math object allows you to perform mathematical tasks on numbers.
		
		-Unlike other objects, the Math object has no constructor.

		-The Math object is static.

		-All methods and properties can be used without creating a Math object first.

	==Number to Integer==
		
		1. Math.round() - Math.round(x) returns the nearest integer:
		2. Math.ceil(x) returns the value of x rounded up to its nearest integer.
		3. Math.trunc(x) returns the integer part of x.
		4. Math.floor(x) returns the value of x rounded down to its nearest integer ex 55/7 = 7
		5. Math.sign(x) returns if x is negative, null or positive
		6. Math.pow(x, y) returns the value of x to the power of y.
		7. Math.sqrt(x) returns the square root of x.
		8. Math.abs(x) returns the absolute (positive) value of x.

	***Math.random() used with Math.floor() can be used to return random integers.***
		// Returns a random integer from 0 to 9:
			Math.floor(Math.random() * 10);

**The Optional Chaining Operator (?.)
	-The ?. operator returns undefined if an object is undefined or null (instead of throwing an error)

**JSON**	
		-JSON is a format for storing and transporting data.
		-JSON is often used when data is sent from a server to a web page.
			=The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text only. 
			 Code for reading and generating JSON data can be written in any programming language.

**use Strict**

		-Strict mode is declared by adding "use strict"; to the beginning of a script or a function.

		-Declared at the beginning of a script, it has global scope (all code in the script will execute in strict mode):

-------------------------------------------------Day-8----------------------------------------------------------

			***React JS**

**Component**
	-React apps are made out of components. A component is a piece of the UI (user interface) that has its own logic and appearance. 
	A component can be as small as a button, or as large as an entire page.

**Class Component**

	===LifeCycle methods-
	 If you define the componentDidMount method, React will call it when your component is added (mounted) to the screen. 
	 React will call componentDidUpdate after your component re-renders due to changed props or state. 
	 React will call componentWillUnmount after your component has been removed (unmounted) from the screen.

	==practice with ChatRoom example covered state,props and lifecycle methods.

**Catching rendering errors with an error boundary**

	-By default, if your application throws an error during rendering, React will remove its UI from the screen. 
	To prevent this, you can wrap a part of your UI into an error boundary. 
	An error boundary is a special component that lets you display some fallback UI instead of the part that crashed—for example, 
	an error message.

	-To implement an error boundary component, you need to provide static getDerivedStateFromError which lets you update 
	 state in response to an error and display an error message to the user. 
	 You can also optionally implement componentDidCatch to add some extra logic, for example, 
	 to log the error to an analytics service.

**State**
	-State can hold any kind of JavaScript value, including objects.
	 But you shouldn’t change objects that you hold in the React state directly. 
	 Instead, when you want to update an object, you need to create a new one (or make a copy of an existing one), 
	 and then set the state to use that copy.

	==Mutation==
		-So far you’ve been working with numbers, strings, and booleans. 
		 These kinds of JavaScript values are “immutable”, meaning unchangeable or “read-only”. 
		 You can trigger a re-render to replace a value:

	==Updating a Nested Object
		**Instead of useState we can use useImmer
	-The draft provided by Immer is a special type of object, called a Proxy, that “records” what you do with it. 
	 This is why you can mutate it freely as much as you like! Under the hood, Immer figures out which parts of the draft 
	 have been changed, and produces a completely new object that contains your edits.

**Conditional Rendering**

	-Your components will often need to display different things depending on different conditions. 
	 In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.


 
**New Point**
If a function:

Starts with a capital letter

Returns JSX

Then React treats it like a custom tag/component and lets you use it like: <MyComponent someProp="value" />
	==As we used in conditional rendering example Item function as: <Item isPacked={true}  name="Space Suit"/>

**Props**

	-React components use props to communicate with each other. Every parent component can pass some information 
	 to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value 
	 through them, including objects, arrays, and functions.

------------------------------------------------------------Day-10---------------------------------------------------------------

**Controlled Component**
	
	-a controlled component is a form element whose value is controlled by React state. 
	 Instead of the DOM managing the component's value, React's state serves as the single source of truth. 
	 When the user interacts with the input, an event handler updates the state, and React re-renders the component 
	 to reflect the change. This approach enables greater control over form data, facilitating tasks such as validation and formatting.

**Uncontrolled Component**

	-Uncontrolled components, on the other hand, store their data directly in the DOM. To access the data, you would typically 
	 use a ref to interact with the DOM element directly. While this approach can be simpler for basic forms, it offers less control 
	 and makes it harder to implement complex logic or validation.

---------------------------------------------------------Day-11---------------------------------------------------------------------

  -Complete two task 
	1- Add Edit and Delete button in Table also add functionality.
	2- When user click on edit data field converted into input and allow user to edit from there.

---------------------------------------------------------Day-12-------------------------------------------------------------------

 **Learn and apply Formik**

----------------------------------------------------------Day-13--------------------------------------------------------------

**CreateBrowserRouter**
	-It makes array of Routes.

-----------------------------------------------------------29/05/20225--------------------------

**Axios Intercepter

-Axios interceptors are functions that Axios calls for every request or response. 
 Essentially, these interceptors give you the ability to run your code or modify the request/response before 
 the request is sent or before the promise is returned to the client code. This feature is particularly useful for logging, 
 authentication, and handling errors uniformly across all API calls.

To handle tokens, responses, and errors within Axios interceptors, you'll use request and response interceptors. 
Request interceptors can add tokens to headers before sending requests, while response interceptors can handle 
successful responses and errors like 401 (unauthorized) or 404 (not found)


1. Request Interceptor (Adding Tokens): 
Purpose: Add authentication tokens to the Authorization header of outgoing requests.

2. Response Interceptor (Handling Responses and Errors):
Purpose: Handle successful responses and errors returned from the API

-------------------------------------------------------------03-06-2025---------------------------------

Redux Toolkit is the official recommended way to write Redux logic. It is a package that simplifies the process of using Redux, 
a state management library for JavaScript applications, particularly React applications. 
Redux Toolkit reduces boilerplate code and makes Redux more efficient.

Key Features:

configureStore: Redux Store where all Data Store it is a storage.(Only one Store in Project)
createSlice: We can make multiple slice and it defines reducers and actions.
createAsyncThunk: Simplifies handling asynchronous actions, like data fetching.

**Redux thunk
--------What is Redux thunk-------
Redux thunk is a middleware for the Redux library that allows you to write action 
creators that return functions instead of action objects.
This function can be used to delay the dispatch of an action or to dispatch actions only if a certain condition is met. 
It makes it possible to handle asynchronous operations inside action creators, 
which is crucial for tasks like fetching data from an API.

------Why Use Redux Thunk?----------
In a typical Redux application, action creators return plain objects. 
This works well for synchronous operations, but it falls short for asynchronous tasks. 
For example, when you need to fetch data from an API, you can't wait for the API response synchronously in 
the action creator. Redux Thunk addresses this limitation by allowing action creators to return functions that 
can perform asynchronous operations.
 
**extraReducers
		-This property in createSlice enables you to define reducers that handle actions dispatched from other parts of your 				application.It's useful when you need to update your slice's state based on actions that are not directly generated by 		the slice itself.

**builder
		-This object is passed as an argument to the extraReducers function. 
 		It provides methods like addCase and addMatcher to define how the slice should respond to different actions.  

**addCase       
		-This method on the builder object allows you to add a reducer function for a specific action type. 
		The reducer function receives the current state and the action object and is responsible for updating the state 		acordingly. 

------------------------------------------------------------------------------------------
**Redux Persist

	-Redux Persist is a library that enables persistent storage of Redux store data, 
	 making it ideal for scenarios where you need to preserve user preferences, session data, or other relevant information across 	 browser sessions or app restarts.When used with Redux Toolkit, it simplifies the process of persisting and rehydrating your 	 Redux store state, enhancing the user experience by maintaining data across sessions. 

**State Persistence

	-Redux Persist allows you to save your Redux store's state to browser storage (like local storage or session storage). 
	 This means that when a user reloads a page or closes a browser tab, their data will be preserved. 

**Rehydration

	-Redux Persist also handles the rehydration of the state, meaning it can restore the persisted state from storage when the app 	 starts or a page is reloaded. 	
